import java.util.*; (redone)
import java.util.LinkedList;
public class kd{
    public static void main(String args[]){
        LinkedList<String> name = new LinkedList<>();
        LinkedList<Integer> age = new LinkedList<>();
        
        name.add("RD");
        age.add(700);
        
        System.out.print(name + "s age is" + age + "years ");
    }
}

                                                      /* Creating LinkedList from Scrach */

/*
how to print the custom linkedList (AddFirst)
*/
import java.util.ArrayList;

public class LinkedList {
    private Node head;
    private Node tail;
    private int size;
    
    public class Node {
        int val;
        Node next;

        Node(int value) {
            this.val = value;
            this.next = null;
        }
    }
    public void display() {
        Node temp = this.head;

        while(temp != null) {
            System.out.print(temp.val+ " -> ");
            temp = temp.next;
        }

        System.out.println("null");
    }
    public void addFirst(int data) {
        //        Create the node and fill the data
        Node newNode = new Node(data);
//        attach to the Chain
        if(this.size == 0) {
            this.head = newNode;
            this.tail = newNode;
            this.size = 1;
        } else {
            newNode.next = this.head;
            this.head = newNode;
            this.size +=1;
        }
    }

    public static void main(String[] args) throws Exception {
        LinkedList linkedList = new LinkedList();
//          ----- add first ---------
      linkedList.addFirst(1);
    linkedList.addFirst(2);
    
        System.out.println("size: " + linkedList.size);
         linkedList.display();
    }
}
output :-
size: 3
2 -> 1 -> null




/*
how to print the custom linkedList (AddLast)
*/

import java.util.ArrayList;
public class LinkedList {
    private Node head;
    private Node tail;
    private int size;

    public class Node {
        int val;
        Node next;
        Node(int value) {
            this.val = value;
            this.next = null;
        }
    }
    public void display() {
        Node temp = this.head;
        while(temp != null) {
            System.out.print(temp.val+ " -> ");
            temp = temp.next;
        }
        System.out.println("null");
    }
      public void addFirst(int data) {
        //        Create the node and fill the data
        Node newNode = new Node(data);
//        attach to the Chain
        if(this.size == 0) {
            this.head = newNode;
            this.tail = newNode;
            this.size = 1;
        } else {
            newNode.next = this.head;
            this.head = newNode;
            this.size +=1;
        }
    }
    public void addLast(int data) {
//        Create the node and fill the data
        Node newNode = new Node(data);
//        attach to the Chain
        if(this.size == 0) {
            this.head = newNode;
            this.tail = newNode;
            this.size = 1;
        } else {
            // Attach node to chain
            Node tailNode = this.tail;
            tailNode.next = newNode;
//            change the tail Pointer
            this.tail = newNode;

//          change the size
            this.size += 1;
        }
    }
    public static void main(String[] args) throws Exception {
        LinkedList linkedList = new LinkedList();
        
        linkedList.addLast(1);
        linkedList.addLast(2);
        linkedList.addFirst(3);

        System.out.println("size: " + linkedList.size);
        linkedList.display();
    }
}
size: 3
3 -> 1 -> 2 -> null



/*
how to print the custom linkedList (AddAt)
*/

import java.util.ArrayList;

public class LinkedList {
    private Node head;
    private Node tail;
    private int size;

    public class Node {
        int val;
        Node next;
        Node(int value) {
            this.val = value;
            this.next = null;
        }
    }
   public void display() {
        Node temp = this.head;

        while(temp != null) {
            System.out.print(temp.val+ " -> ");
            temp = temp.next;
        }
        System.out.println("null");
    }
      public void addFirst(int data) {
        //        Create the node and fill the data
        Node newNode = new Node(data);
//        attach to the Chain
        if(this.size == 0) {
            this.head = newNode;
            this.tail = newNode;
            this.size = 1;
        } else {
            newNode.next = this.head;
            this.head = newNode;
            this.size +=1;
        }
    }
      public void addAt(int index, int data) throws Exception {
        if(index == 0) {
            this.addFirst(data);
            return;
        }
        if(index == this.size) {
            this.addFirst(data);
            return;
        }
        if(index < 0 || index >= this.size ) {
            throw new Exception("Index out of bound (m)" + "Index: "
                    + index + " , Size: " + this.size);
        }
//        Create new node
        Node newNode = new Node(data);
//        Find previous Node of the index
        Node previousNode = this.getNodeAt(index - 1);
//        New node next will be the (next)* of the previousNode
        Node nextOfPreviousNode = previousNode.next;
        newNode.next = nextOfPreviousNode;
//        Privious Node's Next should be newly created node
        previousNode.next = newNode;
        this.size += 1;
    }
     public Node getNodeAt(int index) throws Exception {
        if(this.size == 0) {
            throw new Exception("Size of LL is 0 right now");
        }
        if(index < 0 || index >= this.size) {
            throw new Exception("Index out of bound" + "Index: "
                    + index + " , Size: " + this.size);
        }
        Node temp = this.head;
        while(index-- != 0) {
            temp = temp.next;
        }
        return temp;
    }
    public static void main(String[] args) throws Exception {
        LinkedList linkedList = new LinkedList();
        linkedList.addFirst(1);
        linkedList.addFirst(2);
        linkedList.addFirst(3);
        linkedList.addAt(1, 62);
        
        System.out.println("size: " + linkedList.size);
        linkedList.display();
    }
}
size: 3
3 -> 2 -> 1 -> null




/*
how to print the custom linkedList (AddFirst)
*/

import java.util.LinkedList;

public class LLpractice {
    private  Node head;
    private  Node tail;
    private  int size;
    public LLpractice(){
        this.size= 0;
    }

    public void insertFirst(int val){
    Node newNode = new Node(val);
    newNode.next = head;
    head = newNode;
    size++;
}
  public  void display(){
        Node iteam = head;
        while(iteam != null){
            System.out.print(iteam.val+" ");
            iteam = iteam.next;
        }
        System.out.println();
    }
    private class Node{
        private int val;
        private Node next;
       public  Node(int val){
           this.val= val;
        }
        public  Node(int val, Node next){
           this.val= val;
           this.next=next;
        }
    }
     public static void main(String[] args) {
        LLpractice list = new LLpractice();
        list.insertFirst(3);
        list.insertFirst(2);
        list.insertFirst(1);
     //linkedList.insertLast(1, 62);
        
        list.display();
     
    }
}
output:
1 2 3 


/*
how to print the custom linkedList (AddFirst)(redone but with more in-depth explaination of each line)
*/
import java.util.LinkedList;
public class LLpractice { // class named LLpractice
    private  Node head;  // access modifier is private nd the vaiable head is of type Node 
    private  Node tail;  // access modifier is private nd the vaiable tail is of type Node
    private  int size;  // access modifier is private nd the vaiable size is of type int
    public LLpractice(){  // this is a contructor named llpractice
        this.size= 0;     //  here we have used this keyword to access the size field(variable) 
    }

    public void insertFirst(int val) { // this is a meathod called insertFirst with argument int val
    Node newNode = new Node(val); // this is a object named newNode nd Node() is a constructor with value val of that Node class 
    newNode.next = head;          // here we are accessing the next nd head members of the class 
    head = newNode;               // here we are giving the head value of newNode object 
    size++;                       // here we are increasing the size by 1 
}
  public  void display(){         // this is a meathod called display 
        Node iteam = head;        // this is a field(vaiable) named iteam with value head 
        while(iteam != null){     // simple while looop 
            System.out.print(iteam.val+" ");  // print statment
            iteam = iteam.next;              // here we are giving iteam variable value of iteam.next which is the next element from its position
        }
        System.out.println();                // print statement 
    }
    private class Node{                      // class named Node 
        private int val;                     // access modifier is private nd the vaiable val is of type int 
        private Node next;                  // access modifier is private nd the vaiable next is of type Node 
       public  Node(int val){               // this is a contructor named Node
           this.val= val;                   // here we have used this keyword to access the val field(variable)
        }
        public  Node(int val, Node next){   // here we have created constructor with arguments val of type int, nd next of type Node
    this.val= val;   // here we used this keyword to access the val variable cause its not allowed declare two or more variables having the same name inside a class
           this.next=next;                  // here we have used this keyword to access the next field(variable) same as above 
        }
    }
     public static void main(String[] args) { // main function 
        LLpractice list = new LLpractice();     // here we created object called list nd created contructor called LLpractice
        list.insertFirst(3);                    // our input
        list.insertFirst(2);                    // our input
        list.insertFirst(1);                    // our input
     //linkedList.insertLast(1, 62);
        
        list.display();                         // here we are accessing display meathod using our object which we created
     
    }
}

























