import java.util.*;
import java.io.*;
public class Main{
    public static void main(String args[]){
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] arr = new int[n];
        for(int i=0; i<n; i++){
            arr[i] = in.nextInt();
        }
        mergeSort(arr, 0, arr.length - 1);
        for(int i=0; i<n; i++){
            System.out.print(arr[i] + " ");
        }
    }
    public static void mergeSort(int[] arr, int left, int right){
        if(left >= right){
            return;
        }
        int mid = left + (right - left)/2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        mergeArr(arr, left, mid, right);
    }
    public static void mergeArr(int[] arr, int left, int mid, int right){
        int p1 = left;
        int p2 = mid + 1;
        int[] ansArr = new int[right - left + 1];
        int iter = 0;
        
        while(p1 <= mid && p2 <= right){
            if(arr[p1] < arr[p2]){
                ansArr[iter] = arr[p1];
                iter++;
                p1++;
            }else {
                ansArr[iter] = arr[p2];
                iter++;
                p2++;
            }
        }
        while(p1 <= mid){
            ansArr[iter] = arr[p1];
            iter++;
            p1++;
        }
        while(p2 <= right){
            ansArr[iter] = arr[p2];
            iter++;
            p2++;
        }
        for(int i=left; i<=right; i++){
            arr[i] = ansArr[i - left];
        }
    }
}





/*
implement bubble sort 
*/



import java.util.*;
public class kd{
    public static void main(String args[]){
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] arr = new int[n];
        for(int i=0; i<n; i++){
            arr[i] = in.nextInt();
        }
        for(int i=0; i<n; i++){
            bub(arr);
            System.out.print(arr[i] + " ");
        }
    }
    public static void bub(int[] arr){
        for(int i=0; i<arr.length; i++){
            for(int j=0; j<arr.length - i - 1; j++){
                if(arr[j] > arr[j+ 1]){
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }
}
input :
4
2 3 1 4
output :
1 2 3 4


/*
implement selection sort
*/

import java.util.*;
public class kd{
    public static void main(String args[]){
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] arr = new int[n];
        for(int i=0; i<n; i++){
            arr[i] = in.nextInt();
        }
        for(int i = 0; i<n; i++){
            selection(arr);
            System.out.print(arr[i] + " ");
        }
    }
    public static void selection(int[] arr){
        for(int i=0; i<arr.length; i++){
            int low = i;
            for(int j=i + 1; j<arr.length; j++){
                if(arr[j] < arr[low]){
                    low = j;
                }
            }
            int temp = arr[low];
            arr[low] = arr[i];
            arr[i] = temp;
        }
    }
}
input:
4
4 2 1 3
ouput :
1 2 3 4 



/*
implement insert Sort
*/

import java.util.*;
public class kd{
    public static void main(String args[]){
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] arr = new int[n];
        for(int i=0; i<n; i++){
            arr[i] = in.nextInt();
        }
        for(int i = 0; i<n; i++){
            inse(arr);
            System.out.print(arr[i] + " ");
        }
    }
        public static void inse(int[] arr){
            for(int i=0; i<arr.length; i++){
                for(int j=i; j>=1; j--){
                    if(arr[j] < arr[j - 1]){
                        int temp = arr[j];
                        arr[j] = arr[j - 1];
                        arr[j - 1] = temp;
                    }
                }
            }
        }
 }
input:
4
4 2 1 3
output:
1 2 3 4 




/*
implement quick sort
*/

import java.util.*;
public class kd{
    public static void main(String args[]){
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] arr = new int[n];
        for(int i=0; i<n; i++){
            arr[i] = in.nextInt();
        }
         qu(arr, 0, arr.length - 1);
        for(int i = 0; i<n; i++){
            System.out.print(arr[i] + " ");
        }
    }
        public static int que(int[] arr, int low, int high){
            int piv = arr[high];
            int i = low - 1;
            for(int j=low; j<high; j++){
                if(arr[j] < piv){
                    i++;
                    int temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
            }
            int temp = arr[i + 1];
            arr[i + 1] = arr[high];
            arr[high] = temp;
            
            return i + 1;
        }
        public static void qu(int[] arr, int low, int high){
            if(low > high){
                return;
            }
            int pi = que(arr, low, high);
            qu(arr, low, pi - 1);
            qu(arr, pi + 1, high);
        }
     }
input :
4
4 2 1 3
output:
1 2 3 4 
     



                ----------------------------------------------new practice-------------------------------------------------------------
1)                
import java.util.*;
public class buble{
    public static void main(String args[]){
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] arr = new int[n];
        for(int i=0; i<n; i++){
            arr[i] = in.nextInt();
        }
        for(int i=0; i<n; i++){
            sortingwithbuble(arr);
            System.out.print(arr[i]+ " ");
        }
    }
    public static void sortingwithbuble(int[] arr){
        for(int i=0; i<arr.length; i++){
            for(int j=0; j<arr.length - i - 1; j++){
                if(arr[j] > arr[j + 1]){
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }
}
input :
3
2 4 3
input :
2 3 4

2)
import java.util.*;
public class selection{
    public static void main(String args[]){
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] arr = new int[n];
        for(int i=0; i<n; i++){
            arr[i] = in.nextInt();
        }
        for(int i=0; i<n; i++){
            sortingwithSeletion(arr);
            System.out.print(arr[i] + " ");
        }
    }
    public static void sortingwithSeletion(int[] arr){
        for(int i=0; i<arr.length; i++){
            int low = i;
            for(int j= i + 1; j<arr.length; j++){
                if(arr[j] < arr[low]){
                    low = j;
                }
            }
            int temp = arr[low];
            arr[low] = arr[i];
            arr[i] =  temp;
        }
    }
}
input :
3
2 4 3
output :
2 3 4 

3)
import java.util.*;
public class insert{
    public static void main(String args[]){
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] arr = new int[n];
        for(int i=0; i<n; i++){
            arr[i] = in.nextInt();
        }
        for(int i=0; i<n; i++){
            sortingwithinsert(arr);
            System.out.print(arr[i] + " ");
        }
    }
    public static void sortingwithinsert(int[] arr){
        for(int i=0; i<arr.length; i++){
            for(int j= i; j>0; j--){
                if(arr[j] < arr[j - 1]){
                    int temp = arr[j];
                    arr[j] = arr[j - 1];
                    arr[j - 1] = temp;
                }
            }
        }
    }
}
input :
3
2 4 3
output :
2 3 4


4)
import java.util.*;
public class merge{
    public static void main(String args[]){
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] arr = new int[n];
        for(int i=0; i<n; i++){
            arr[i] = in.nextInt();
        }
        mergeSort(arr, 0, arr.length - 1);
        for(int i=0; i<n; i++){
            System.out.print(arr[i] + " ");
        }
    }
    public static void mergeSort(int[] arr, int left, int right){
        if(left >= right){
            return;
        }
        int mid = left + (right - left)/2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        mergeSortAlgo(arr, left, mid, right);
    }
    public static void mergeSortAlgo(int[] arr, int left, int mid, int right){
        int p1 = left;
        int p2 = mid + 1;
        int[] ansArr = new int[right - left + 1];
        int iter = 0;
        
        while(p1 <= mid && p2 <= right){
            if(arr[p1] < arr[p2]){
                ansArr[iter] = arr[p1];
                iter++;
                p1++;
            }else {
                ansArr[iter] = arr[p2];
                iter++;
                p2++;
            }
        }
        while(p1 <= mid){
            ansArr[iter] = arr[p1];
            iter++;
            p1++;
        }
        while(p2 <= right){
            ansArr[iter] = arr[p2];
                ansArr[iter] = arr[p2];
                iter++;
                p2++;
            }
            for(int i=left; i<= right; i++){
                arr[i] = ansArr[i - left];
            
        }
    }
}
input :
3
2 4 3
output: 
2 3 4
