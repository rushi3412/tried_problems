/*
find duplicate characters in given string using hashmap
*/
import java.util.*;
public class GFG {
    public static void dupChar(String str) {
        Map<Character, Integer> map = new HashMap<>();
        char[] charArray = str.toCharArray();
        for (char c : charArray) {
            if (map.containsKey(c)) {
                map.put(c, map.get(c) + 1);
            }
            else {
                map.put(c, 1);
            }
        }
        for (Map.Entry<Character, Integer> entry : map.entrySet()) {
            if (entry.getValue() > 1) {
                
                System.out.println(entry.getKey());
            }
        }
    }
    public static void main(String args[]) {
        String str = "geeksforgeeks";
        dupChar(str);
    }
}

/*
find duplicate characters in given string using hashmap by scanner class
*/
import java.util.*;
public class findDup{
    public static void main(String args[]){
        Scanner in = new Scanner(System.in);
        String str = in.nextLine();
        dupliCha(str);
    }
    public static void dupliCha(String str){
        HashMap<Character, Integer> map = new HashMap<>();
        char[] chrArr = str.toCharArray();
        for(char c : chrArr){
            if(map.containsKey(c)){
                map.put(c, map.get(c) + 1);
            }else{
                map.put(c, 1);
            }
        }
        for(HashMap.Entry<Character, Integer> entry : map.entrySet()){
            if(entry.getValue() > 1){
                System.out.print(entry.getKey());
            }
        }
    }
}



/*
        Question: Frequency of items inside the array(shroter method )
        Input: [1,2,3,5,1,2,5,6,1,1,2]
        Output:
     */    
    
    
import java.util.*;
import java.util.HashMap;
public class kd{
    public static void main(String args[]){
    HashMap<Integer, Integer> map = new HashMap();
    Scanner in = new Scanner(System.in);
    int n = in.nextInt();
    int[] arr = new int[n];
    for(int i=0; i<n; i++){
        arr[i] = in.nextInt();
    }
    for(int i=0; i<n; i++){
        int key = arr[i];
        
     map.put(key, map.getOrDefault(key, 0) + 1);
    }
    System.out.print(map);
    
   }
}    
input :
11
1 2 3 5 1 2 5 6 1 1 2
output :
{1=4, 2=3, 3=1, 5=2, 6=1}
 
//write function to find second highest number from a array of numbers 
import java.util.*;
public class highNu{
    public static void main(String args[]){
        int[] num = {5, 3, 6 ,1,7};
        int ans = secondHighest(num);
        System.out.println(ans);
    }
    public static int secondHighest(int[] arr){
        int highest = Integer.MIN_VALUE;
        int secondHigh = Integer.MIN_VALUE;
        
        for(int n : arr){
            if(n > highest){
                secondHigh = highest;
                highest = n;
            }else if(n > secondHigh && n < highest){
                secondHigh = n;
            }
        }
        return secondHigh;
    }
}
O/P:- 6




//write function to find second highest number from a array of numbers (userinput)


import java.util.*;
public class secondHi{
    public static void main(String args[]){
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] arr = new int[n];
        
        for(int i=0;i<n; i++){
            arr[i] = in.nextInt();
        }
        int ans = secondHighestN(arr);
        System.out.println(ans);
    }
    public static int secondHighestN(int[] arr){
        int highest = Integer.MIN_VALUE;
        int secondHighest = Integer.MIN_VALUE;
        
        for(int n : arr){
            if(n > highest){
                secondHighest = highest;
                highest = n;
            }else if(n > secondHighest && n < highest){
                secondHighest = n;
            }
        }
        return secondHighest;
    }
}
input :
5
5 6 7 8 9
output: 8



//write function to find second highest number from a array of numbers (userinput,short meathod)

import java.util.*;
public class secondHi{
    public static void main(String args[]){
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] arr = new int[n];
        
        for(int i=0;i<n; i++){
            arr[i] = in.nextInt();
        }
        int ans = secondHighestN(arr);
        System.out.println(ans);
    }
    public static int secondHighestN(int[] arr){
        Arrays.sort(arr);
        return arr[arr.length - 2];
    }
}
